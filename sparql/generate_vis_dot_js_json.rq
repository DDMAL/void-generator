PREFIX void:<http://rdfs.org/ns/void#>
SELECT 
(CONCAT("nodes = [", GROUP_CONCAT(?node; separator=", "),"]; edges = [", (IF(COUNT(?edges) > 0, 
        (GROUP_CONCAT(?edges; separator=", ")), " "
      )), "]") AS ?allEdges)
FROM <https://sparql.uniprot.org/.well-known/void> 
FROM <https://sparql.uniprot.org/.well-known/sparql-examples> 
WHERE {
  {
  SELECT 
    (CONCAT("{id:'", ?nodeId, "', label:'", (SAMPLE(?class1str)), "', group:'", (SAMPLE(?graphstr)), "',"," value:'",STRLEN(STR(SUM(?pp1triples))),"',"," shape:'box'}") AS ?node)  
        (GROUP_CONCAT(?edge; separator=", ") AS ?edges) 
        WHERE {
    ?s <http://www.w3.org/ns/sparql-service-description#graph> ?graph . 
    ?graph void:classPartition ?cp1 .
    ?cp1 void:class ?class1 .
    ?cp1 void:propertyPartition ?pp1 .
    ?pp1 void:property ?prop .
    ?pp1 void:triples ?pp1triples .
    ?pp1 void:classPartition ?cp2 .
    ?cp2 void:class ?class2 .
    OPTIONAL{
      ?pref1 sh:namespace ?namespace1 ;
            sh:prefix ?prefix1 .
      FILTER(STRSTARTS(STR(?class1),STR(?namespace1)))
    }
    OPTIONAL{
      ?pref2 sh:namespace ?namespace2 ;
            sh:prefix ?prefix2 .
      FILTER(STRSTARTS(STR(?class2),STR(?namespace2)))
    }
    OPTIONAL{
      ?pref3 sh:namespace ?namespace3 ;
            sh:prefix ?prefix3.
      FILTER(STRSTARTS(STR(?prop),STR(?namespace3)))	 
    }
    OPTIONAL{
      ?pref4 sh:namespace ?namespace4 ;
            sh:prefix ?prefix4.
       FILTER(STRSTARTS(STR(?graph),STR(?namespace4)))
    }
    BIND(CONCAT(?prefix1, ":", SUBSTR(STR(?class1), STRLEN(STR(?namespace1))+1)) AS ?class1prefixstr)
    BIND(CONCAT(?prefix2, ":", SUBSTR(STR(?class2), STRLEN(STR(?namespace2))+1)) AS ?class2prefixstr)
    BIND(CONCAT(?prefix3, ":", SUBSTR(STR(?prop), STRLEN(STR(?namespace3))+1)) AS ?propprefixstr)
    BIND(CONCAT(?prefix4, ":", SUBSTR(STR(?graph), STRLEN(STR(?namespace4))+1)) AS ?graphprefixstr)
    BIND(IF(BOUND(?prefix1), ?class1prefixstr, STR(?class1)) AS ?class1str)
    BIND(IF(BOUND(?prefix2), ?class2prefixstr, STR(?class2)) AS ?class2str)
    BIND(IF(BOUND(?prefix3), ?propprefixstr, STR(?prop)) AS ?prop2str)
    BIND(IF(BOUND(?prefix4), ?graphprefixstr, MD5(STR(?graph))) AS ?graphstr)
    BIND(CONCAT(?class1str,"-",?graphstr) AS ?nodeId)
    BIND(CONCAT("{from:'", ?class1str,"-",?graphstr, "', to:'",?class2str,"-",?graphstr,"', value:'",STRLEN(STR(?pp1triples)),"', arrows: 'to', label:'",?prop2str,"'}") AS ?edge)

    ?graph void:classPartition ?cp3 .
    ?cp3 void:class ?class2 .
    }  GROUP BY ?nodeId
  }
  BIND(1 AS ?g)
 
} GROUP BY ?g
